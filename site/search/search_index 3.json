{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Passport.js","text":""},{"location":"#introduction-to-local-strategy","title":"Introduction to Local Strategy","text":""},{"location":"#what-is-passportjs","title":"What Is Passport.js","text":"<p> Passport.js is a middleware for authentication tailored to node.js, designed to offer various authentication strategies for your application. With its features, you can enable users to log in using social media accounts such as Facebook or Google, or through username and password. This middleware provides a convenient solution for developers who aim to implement authentication in their Express-based applications.</p>"},{"location":"#benefits-for-full-stack-students","title":"Benefits For Full Stack Students","text":"<p>For term 2 Full Stack Web Development students, Passport.js is a valuable resource that offers flexibility in terms of authentication as they learn to develop applications. By utilizing Passport.js, students can streamline the login process, allowing them to focus on learning additional skills in various programming languages, technologies, and so on.</p>"},{"location":"#understanding-our-documentation","title":"Understanding Our Documentation","text":"<p>We have included numerous admonitions to make understanding passport.js easier for you. Some of them will have an arrow on the right hand side to collapse or open the information.</p> <p>Notes</p> <p>Our notes will provide relevant information to that specific instruction.</p> <p>Code Blocks</p> <p>This is where we have placed our code blocks. There is a copy &amp; paste icon in the top right corner of the black code block.</p> <p>Success</p> <p>Here you will find screenshots of what each step should look like.</p> <p>Tips &amp; Resources</p> <p>Here we provide you with tips and relevant resources to learn passport.js.</p> <p>Read Before Proceeding</p> <p>We try to warn you if there is a complicated topic to make sure that you understand the prerequisites before proceeding.</p> <p>Errors</p> <p>We will show you any potential errors.</p>"},{"location":"#project-requirements","title":"Project Requirements","text":""},{"location":"#languages-technologies","title":"Languages &amp; Technologies","text":"<p>To learn Passport.js, users should have fundamental knowledge of certain languages and technologies, including:</p> <p>\u2714 HTML</p> <ul> <li>Creating forms</li> <li>Creating buttons</li> </ul> <p>\u2714 Javascript</p> <ul> <li>Event listeners</li> <li>Adding functionality to forms</li> </ul> <p>\u2714 Express</p> <ul> <li>Setting up an express application</li> </ul> <p>\u2714 Visual Studio Code (VSCode)</p> <ul> <li>Creating files</li> <li>Running code on your local browser</li> </ul> Bonus Knowledge <p>Knowledge of additional languages and technologies would be beneficial. Some examples are:</p> <ul> <li> <p>Express Sessions</p> </li> <li> <p>Cascading Style Sheets (CSS)</p> </li> </ul> Inexperienced Users <p>Users who lack confidence in these languages and technologies should review their respective documentation before learning Passport.js.</p> Review Documentation <p> HTML Documentation</p> <p> HTML Forms</p> <p> Javascript</p> <p> Javascript Event Listeners</p> <p> Express</p> <p>Next Page: Preliminary Setup</p>"},{"location":"glossary/","title":"Glossary","text":""},{"location":"glossary/#important-terms","title":"Important Terms","text":""},{"location":"glossary/#array","title":"Array","text":"<p>A data structure in programming used to store multiple values of the same data type in a single variable</p>"},{"location":"glossary/#authentication","title":"Authentication","text":"<p>The process of verifying the identity of a user or system entity attempting to access a resource or service</p>"},{"location":"glossary/#database","title":"Database","text":"<p>A structured collection of data that is stored and organized in a way that enables efficient retrieval and management of the data</p>"},{"location":"glossary/#edge-cases","title":"Edge Cases","text":"<p>An edge case is an uncommon or unexpected scenario that can cause errors or failures in a program. It can reveal vulnerabilities in a system or application and is important to consider during development and testing.</p>"},{"location":"glossary/#endpoint","title":"Endpoint","text":"<p>An endpoint is a web address that a client (like a browser or mobile app) can use to access a specific function or data provided by a web application. Each endpoint is associated with a specific way of asking for or providing data, such as sending or retrieving information, updating, or deleting.</p>"},{"location":"glossary/#initialize","title":"Initialize","text":"<p>The process of setting up and preparing a system, application, or module for use by configuring its initial state and variables</p>"},{"location":"glossary/#library","title":"Library","text":"<p>A collection of pre-written code that can be reused by other software programs to perform common functions</p>"},{"location":"glossary/#localhost","title":"Localhost","text":"<p>A term used to refer to the local computer that a developer is working on, which is typically identified by the IP address 127.0.0.1</p>"},{"location":"glossary/#middleware","title":"Middleware","text":"<p>Middleware is software that connects different applications or systems and facilitates communication and data exchange between them. Middleware allows the user to use functions throughout the application development not just in one file.</p>"},{"location":"glossary/#module","title":"Module","text":"<p>A self-contained block of code that performs a specific function and can be imported or exported to be used in other programs</p>"},{"location":"glossary/#nodejs","title":"Node.js","text":"<p>Node.js is an open-source, cross-platform JavaScript runtime environment that allows developers to build scalable network applications.</p>"},{"location":"glossary/#nodemon","title":"Nodemon","text":"<p>A tool that automatically restarts a Node.js application whenever changes are made to the code, making the development process faster and more efficient</p>"},{"location":"glossary/#npm-node-package-manager","title":"NPM (Node Package Manager)","text":"<p>A package manager for the JavaScript programming language that allows developers to easily download, install, and manage third-party libraries and tools</p>"},{"location":"glossary/#object","title":"Object","text":"<p>A data structure in programming used to store multiple values of different data types in a single variable, organized as key-value pairs</p>"},{"location":"glossary/#open-source","title":"Open-source","text":"<p>A term used to describe software that is developed and made available to the public under an open-source license, which allows anyone to view, use, modify, and distribute the software's source code</p>"},{"location":"glossary/#passportjs","title":"Passport.js","text":"<p>A popular authentication library for Node.js that provides a set of customizable authentication strategies, such as local, OAuth, and OpenID</p>"},{"location":"glossary/#query","title":"Query","text":"<p>A request for information or data from a database or other data source, typically written in a programming language such as SQL</p>"},{"location":"glossary/#routes","title":"Routes","text":"<p>In web development, routes define the paths or URLs that a user can access on a website or web application, and the functions or actions that should be executed when the user accesses those paths</p>"},{"location":"glossary/#serialize-and-deserialize","title":"Serialize and deserialize","text":"<p>The process of converting data from one format to another for storage, transmission, or processing. Serialization involves converting an object or data structure to a string or binary format, while deserialization involves converting the serialized data back into an object or data structure</p>"},{"location":"glossary/#sessions","title":"Sessions","text":"<p>A way to persist data across multiple requests in a web application. A session is created when a user logs in or visits a website, and can store user-specific data such as login credentials, shopping cart items, or user preferences</p>"},{"location":"glossary/#software-registry","title":"Software registry","text":"<p>A centralized database that stores information about software packages, such as their name, version, dependencies, and license. Users can search and download software packages from the registry, and developers can publish and manage their packages</p>"},{"location":"glossary/#strategies","title":"Strategies","text":"<p>Strategies are ways to check if a request is real or not. They do this by using something called an authentication mechanism, which is like a secret code that proves you are who you say you are. For example, this code could be a password or a special message from a trusted source.</p>"},{"location":"glossary/#undefined","title":"Undefined","text":"<p>A value in programming that indicates the absence of a defined value or variable. It is often used to represent an error or uninitialized variable</p>"},{"location":"glossary/#additional-resources","title":"Additional Resources","text":"<p>If you would like to learn more about passport or other strategies check out the following web pages.</p> Learn More Passport.js"},{"location":"preliminary/","title":"Preliminary Setup","text":""},{"location":"preliminary/#purpose-of-passportjs","title":"Purpose Of Passport.js","text":"<p>Before the installation process, you need to decide on the authentication strategy you want to implement first. The following instructions will guide you through the process of implementing the local strategy.</p>"},{"location":"preliminary/#create-a-project-folder","title":"Create A Project Folder","text":""},{"location":"preliminary/#1project-folder-creation","title":"1.Project Folder Creation","text":"<p>The first thing you will need to do is create a folder for all of the files in this project. Choose a place in your computer that you would like to save your project. Create the folder.</p>"},{"location":"preliminary/#2ensure-correct-folder-in-your-vscode-terminal","title":"2.Ensure Correct Folder In Your VSCode Terminal","text":"<p>In your VSCode terminal, navigate your way to the project folder you created.</p> <p>Command</p> <p>Run the following command to navigate to your root folder.</p> <p><code>cd ~</code></p> <p>This command will list the folders directly inside the root folder.</p> <p><code>ls</code></p> <p>Choose the folder you wish to enter and run this command.</p> <p><code>cd &lt;chosen folder&gt;</code></p> <p>Repeat the last two commands in order until you reach the project folder.</p> Screenshot: Terminal Current Folder <p>We have used passport-example as a folder name.</p> <p> </p>"},{"location":"preliminary/#installation-and-configuration","title":"Installation and Configuration","text":""},{"location":"preliminary/#purpose-of-npm-installation","title":"Purpose Of NPM Installation","text":"<p>Prior to installation, initializing npm is necessary to start the process. With approximately 800,000 code packages, npm is the largest software registry available. It's also an open-source platform, meaning that it is free for all users.</p> Why do we start with <code>npm init</code>? <p>The command npm init is used to initialize a new npm project, which sets up the project's package.json file, while npm install is used to install the dependencies listed in the package.json file. </p> <ul> <li>Therefore, npm init is typically used first to establish the project's configuration before installing any dependencies.</li> </ul>"},{"location":"preliminary/#1installing-npm","title":"1.Installing NPM","text":"<p>1.Initialize npm using the command terminal by running the following command:</p> <p>Command:</p> <p> <code>npm init</code></p> <p>Once your terminal finishes downloading. Hit enter to begin structuring your json file.</p> <p>You will be prompted in your terminal with a few questions. For the sake of this documentation we will hit enter until our terminal is once again displaying the file we are currently working in.</p> Screenshot: Terminal JSON File Creation <p> </p> <p>We are using a folder called passport-example.</p> <p> </p> Updating JSON File <p>You can change this information later on inside the package.json file.</p> <p>When using npm, it generates a package.json file that keeps track of all the libraries and modules utilized in your project. This feature is beneficial as it allows others to gain an understanding of what your project is reliant on, and helps to monitor which program versions are required for proper operation.</p> <p>Next, install the libraries you will need to complete this project. These libraries are passport, passport-local, express, express-sessions, and nodemon.</p> <p>2.To install passport.js to your local VSCode, with npm, use the following command:</p> <p>Windows:</p> <p> <code>$ npm install passport passport-local express express-sessions nodemon</code></p> <p>MacOs:</p> <p> <code>npm install passport passport-local express express-sessions nodemon</code></p> <p>Running this command will install the libraries you need for the project. These files will be inside a folder called node_modules that is automatically created when you run these commands. To confirm that your files have been downloaded correctly you can check in the package.json file.</p> <p>Nodemon facilitates fast Node.js app development by automatically restarting the application upon detecting changes in the project directory.</p> Screenshot: Successful Library Installation <p> </p> <p>These errors and warnings do not affect your ability to work with these libraries.</p>"},{"location":"preliminary/#setting-up-your-express-application","title":"Setting Up Your Express Application","text":"<p>In this section we will teach you how top create your index.html file and app.js file. The html file will hold your login form. The javascript file will be home to all of the functionality.</p>"},{"location":"preliminary/#purpose-of-express","title":"Purpose Of Express","text":"<p>To integrate Passport.js into your project, it's necessary to establish an express application first, as Passport.js is tailored exclusively for express applications. Trying to implement passport.js without using express will create a number of edge cases that may cause issues with your program running successfully.</p>"},{"location":"preliminary/#create-an-html-form","title":"Create An HTML Form","text":""},{"location":"preliminary/#1create-an-html-file","title":"1.Create An HTML File","text":"<p>This will be the file that contains your form. This file must be inside your project folder.</p> Naming Your File <p>This file can be named whatever you would like however we will be referring to it as index.html</p> Screenshot: HTML File Creation <p> </p>"},{"location":"preliminary/#2structure-your-html-document","title":"2.Structure Your HTML Document","text":"<p>This HTML starter code allows the browser that runs this file to understand and interpret any code you write in this document.</p> Understanding HTML Basics <p>Make sure you understand the topic of HTML file structures before proceeding.</p> <p>We have provided you with some helpful documentation below:</p> <p> HTML Documentation</p> <p>HTML File</p> <p>Copy and paste the code below or look at the tip below for a shortcut.</p> <pre><code>```html\n&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n  &lt;head&gt;\n    &lt;meta charset=\"UTF-8\"&gt;\n    &lt;meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\"&gt;\n    &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"&gt;\n    &lt;title&gt;Document&lt;/title&gt;\n  &lt;/head&gt;\n  &lt;body&gt;\n    // Insert form here later\n  &lt;/body&gt;\n&lt;/html&gt;\n```\n</code></pre> Tip: Setting Your HTML Template <p>There is a VSCode shortcut that will set your template.</p> <p> !+Enter</p> Screenshot: HTML Document Template <p> </p>"},{"location":"preliminary/#3create-an-html-form","title":"3.Create An HTML Form","text":"<p>This form will contain the input boxes for the user. inside the body portion of your index.html file paste this form. It is a basic form that has a username and password as well as buttons for both logging in and out.</p> <p>HTML Form</p> <p>You can copy and paste this html form into the stated part of the body in your html file.</p> <pre><code>    &lt;form method=\"post\" action=\"/login\"&gt;\n      &lt;label for=\"username\"&gt;Username:&lt;/label&gt;&lt;br&gt;\n      &lt;input type=\"text\" id=\"username\" name=\"username\"&gt;&lt;br&gt;\n      &lt;label for=\"password\"&gt;Password:&lt;/label&gt;&lt;br&gt;\n      &lt;input type=\"text\" id=\"password\" name=\"password\"&gt;&lt;br&gt;&lt;br&gt;\n      &lt;input type=\"submit\" value=\"Log In\"&gt;\n    &lt;/form&gt;\n    &lt;form method=\"get\" action=\"/logout\"&gt;\n        &lt;input type=\"submit\" value=\"Log Out\"&gt;\n    &lt;/form&gt;\n</code></pre> Advanced Users <p>You can customize your form later but for this demonstration we will be covering the basics.</p> <p>Some features you may consider are:</p> <ul> <li> <p>Hide the logout button while users are not logged in and hide the login while users are logged in.</p> </li> <li> <p>CSS and designing an aesthetically appealing form.</p> </li> </ul> Screenshot: HTML Form <p>Your html file should now look like this.</p> <p></p> <p>You will need to create a route for the login but we will explain more about that on the next page.</p>"},{"location":"preliminary/#4create-loginlogout-button","title":"4.Create Login/Logout Button","text":"<p>In the html form we have included a logout button. For functionality you will need to create a route for each. We will discuss this on the next page. Just understand that your buttons will not work for now.</p> Logout Button <p>There are 4 important steps to create a functional logout button.</p> <p>\u00a0\u00a0\u00a0\u00a01.Reference the logout button.</p> <p>\u00a0\u00a0\u00a0\u00a02.Enable the button for logged in users.</p> <p>\u00a0\u00a0\u00a0\u00a03.Create the logout function.</p> <p>\u00a0\u00a0\u00a0\u00a04.Create an event listener for the button to work when clicked on.</p> <p>If you are not familiar with logout buttons revisit the topic and then return here.</p> <p>Here is a helpful resource on the topic of logout buttons:</p> <p> Logout Buttons</p>"},{"location":"preliminary/#create-the-javascript-file","title":"Create The Javascript File","text":""},{"location":"preliminary/#1create-a-new-javascript-file","title":"1.Create A New Javascript File","text":"<p>We need to create a Javascript file to add all of the routes and functionality of the login. Without this we would only be able to see the html form but not use it.</p> <p>File Location</p> <p>This file must be inside your project folder. If it is not within the correct folders your routes may not work.</p> Naming Your File <p>This file can be named whatever you would like however we will be referring to it as app.js.</p> Screenshot: Javascript File Created <p>Your file tabs should look similar to this.</p> <p></p>"},{"location":"preliminary/#2insert-code","title":"2.Insert Code","text":"<p>The code snippet we have provided below can be inserted into the app.js file and will provide the foundation of your express application. This includes your server setup.</p> <p>Express Application &amp; Server Code</p> <pre><code>  const express = require(\"express\");\nconst bodyParser = require(\"body-parser\")\nconst session = require(\"express-session\")\nconst path = require(\"path\");\nconst passport = require(\"./passport\");\n\nconst port = process.env.port || 8000;\n\nconst app = express();\n\napp.use(bodyParser.urlencoded({ extended: false }));\napp.use(session({\nsecret: 'keyboard cat',\nresave: false,\nsaveUninitialized: true,\n// cookie: { secure: true }\n// To run this on localhost you must keep this commented out.\n// For any user(s) planning on using this for an application using https, uncomment the cookie line of code above.\n}))\n\n// app.use(passport.initialize())\n// app.use(passport.session())\n\napp.get(\"/\", (req, res) =&gt; {\nres.sendFile(path.join(__dirname, '/index.html'));\n})\n\napp.get(\"/fail\", (req, res) =&gt; {\nconsole.log(req.session.messages);\nres.send(\"Failure to Log In.\");\n})\n\n// app.post(\"/login\", passport.authenticate(\"local\", {\n//     successRedirect: \"/\",\n//     failureRedirect: \"/fail\",\n//     failureMessage: true\n// }))\n\n// app.get(\"/logout\", (req, res) =&gt; {\n//     req.logout((err) =&gt; {\n//         if(err) {\n//             console.log(err);\n//         }\n//     })\n//     res.redirect(\"/\");\n// })\n\napp.listen(port, () =&gt; {\nconsole.log(`Server has started on port ${port}`);\n});\n</code></pre> <p>This will be how your VSCode can send your application to the browser when localhost:8000 is running.</p> Advanced Users <p>For more advanced users, separate your code blocks into an app.js file and have your server code in a separate file called server.js.</p> <p>This will make for cleaner code but for now we will keep our instructions lean.</p>"},{"location":"preliminary/#starting-up-your-express-server","title":"Starting Up Your Express Server","text":""},{"location":"preliminary/#local-browser","title":"Local Browser","text":"<p>Here you will learn how to run your program locally using your localhost.</p>"},{"location":"preliminary/#1script-command","title":"1.Script Command","text":"<p>Find the script in your package.json file and that will be how you command the terminal to run your application. You may change this to a command such as nodemon app.js.</p> <p>Initially, a script will be provided from the installation of libraries. Change this to nodemon app.js. Now you will be able to run this command in your VSCode terminal to launch the project in your local browser.</p> <p>Note: Open package.json and add change script to start your express application</p> Screenshot: Package.JSON- Starter Script <p> </p> <p>As you can see we have added a comma and then some code into the package.json.</p> <p>Replace your code with the following.</p> <p>Package.json</p> <pre><code>{\n\"name\": \"passport-example\",\n\"version\": \"1.0.0\",\n\"description\": \"\",\n\"main\": \"index.js\",\n\"scripts\": {\n\"test\": \"echo \\\"Error: no test specified\\\" &amp;&amp; exit 1\",\n\"dev\": \"nodemon app.js\"\n},\n\"author\": \"\",\n\"license\": \"ISC\"\n}\n</code></pre> Script Command <p>Notice the dev value in the code block. </p> <p><code>nodemon.js</code></p> <p>This is how you will run your code in the VSCode terminal.</p>"},{"location":"preliminary/#2run-script-to-start-server","title":"2.Run Script To Start Server","text":"<p>Remember when we installed nodemon? This is why we installed it.</p> <p>When you run your script, 'nodemon app.js', your program will run on the chosen localhost port. Nodemon will also make sure that your code updates and continues to run rather than having to run a script after any updates.</p> <p>Now, run the script in your command terminal to start the server.</p> <p>You will now be able to see your program when you open localhost:8000. Localhost number is the port number declared in your app.js file.</p> Screenshot: Port URL <p> </p> Example: Port Listener <p>This code is at the top of your app.js.</p> <p></p> <p>This code is at the bottom of your app.js.</p> <p></p>"},{"location":"preliminary/#3run-local-browser","title":"3.Run Local Browser","text":"<p>Currently, we have all of the passport.js code commented out. This is because we have not yet set up passport configuration, a database(Including methods), or the routes.</p> <p>Run the URL localhost:8000 in your browser and you will see your application displayed.</p> Why do we use localhost:8000? <p>We are using 8000 but you may choose your own as long as you use it throughout your entire application.</p> <p>Your HTML will be what is displayed in your browser window.</p> Screenshot: Browser URL &amp; Form <p></p>"},{"location":"preliminary/#conclusion","title":"Conclusion","text":"<p>By the end of this you will have successfully installed all software and setup the basics of your express app: index.html, app.js, and an updated script inside your package.json file.</p> Congratulations <p>You have successfully completed your preliminary setup for implementing passport.js.</p> <p>Next Page: Strategies</p>"},{"location":"routes/","title":"Routes","text":""},{"location":"routes/#purpose-of-routes","title":"Purpose Of Routes","text":"<p>In Passport.js, a route is a protected endpoint that requires authentication. Passport middleware checks if the user is authenticated and redirects them to the login page or sends an error response if not. Each route is associated with an authentication strategy, like local or social authentication. Passport.js lets developers configure authentication strategies for each route to ensure only authenticated users access protected resources.</p>"},{"location":"routes/#import-from-passportjs","title":"Import From Passport.js","text":"<p>Important</p> <p>For the following instructions make sure that you are working inside of your app.js file.</p>"},{"location":"routes/#1-require-passport-from-passportjs","title":"1. Require passport from passport.js","text":"<p>This imports our modified passport module, which contains our local login strategy that we are exporting from inside of passport.js. Uncomment the following lines of code to allow passport.js to be used in your application.</p> <p>Code: Uncomment</p> <pre><code>const passport = require(\"./passport\");\n</code></pre>"},{"location":"routes/#2-use-appuse-to-initialize-passport","title":"2. Use app.use() to initialize passport","text":"<p>Right now we have the following code commented out. We will need to uncomment them to allow the application to use passport.js.</p> <p>Code: Uncomment</p> <pre><code>app.use(passport.initialize());\n</code></pre> <p>This initializes passport so the application understands that we are using it.</p>"},{"location":"routes/#3-connect-passport-to-sessions","title":"3. Connect Passport To Sessions","text":"<p>Right now we have the following code commented out. We will need to uncomment them to allow the application to use passport.js.</p> <p>Code: Uncomment</p> <pre><code>app.use(passport.session());\n</code></pre> <p>By adding this line of code to the top of app.js we can ensure that passport connects to sessions so that we are storing the user information properly when we call the serializeUser function.</p> Middleware <p>The top of your app.js should look like this screenshot.</p> <p></p> <p>By completing these steps, we now automatically have access to 2 important functions that exist within passport:</p> <p>Functions</p> <pre><code>  passport.authenticate()\nreq.logout()\n</code></pre>"},{"location":"routes/#using-passport-functions-inside-routes","title":"Using Passport Functions Inside Routes","text":"<p>Routes are what allow you to control what happens when users enter URLs associated with your website. For example, \"localhost:3000/\" requires you to have a route for \"/\", while \"localhost:3000/users\" requires you to have a route for \"/users\". Users cannot access webpages that do not have routes leading towards them. As we are using the Express module for handling our routes, we will be using app.get and app.post to initialize our routes.</p> Express Routes <p>To read further on Express routes:</p> <p>Express Routes.</p>"},{"location":"routes/#1-create-a-get-route","title":"1. Create A GET Route","text":"<p>Creating a get route will allow you to access the form.</p> <p>Code</p> <pre><code>  app.get(\"/\", (req, res) =&gt; {\nres.sendFile(path.join(__dirname, '/index.html'));\n})\n</code></pre> <p>By doing this, when users access your website's homepage, your app will recognize the route and know to respond by sending the index.html file to the user's browser. This is what allows users to see your website's homepage.</p>"},{"location":"routes/#2-create-a-post-route-for-when-the-user-clicks-the-button-to-submit-the-form","title":"2. Create a POST route for when the user clicks the button to submit the form","text":"<p>Code: Uncomment</p> <pre><code>  app.post(\"/login\") {\n// Login logic goes here\n}\n</code></pre> <p>Here, rather than using app.get, we use app.post, because that is the method that we defined in our HTML form. As well, we use the \"/login\" route, because that is the action we defined in our HTML form. Therefore, when a user clicks the submit button on that form, they will activate this route.</p> Route Types <p>If you need further clarification about post and get routes please read this documentation before proceeding.</p> <p>Route Types</p>"},{"location":"routes/#3-complete-login-route","title":"3. Complete Login Route","text":"<p>Insert passport.authenticate into the POST \"/login\" route.</p> <p>Code</p> <pre><code>app.post(\"/login\", passport.authenticate(\"local\", {\nsuccessRedirect: \"/\",\nfailureRedirect: \"/fail\",\nfailureMessage: true,\n}))\n</code></pre> <p>There are five parts to what we have done.  </p> <p>\u2714 Passport.authenticate is a callback function that takes what the user has placed in the username and password fields, and then runs it through our passport module.  </p> <ul> <li> <p>Local function tells passport to use the local strategy we have configured.  </p> </li> <li> <p>The success redirect line of code shows that if the username and password combination is valid, the user will be redirected to the \"/\" route.  </p> </li> <li> <p>The failure redirect line of code means that if the username and password combination is invalid, the user will be redirected to the \"/fail\" route, which will inform the user that login failed.  </p> </li> <li> <p>Finally, failureMessage is set to \"true\", meaning that on a failure to validate this user, a message will be stored in req.session.messages for the server to use.  </p> </li> </ul>"},{"location":"routes/#4-create-a-logout-route-and-enable-the-logout-using-reqlogout","title":"4. Create a logout route and enable the logout using req.logout()","text":"<p>Code</p> <pre><code>app.get(\"/logout\", (req, res) =&gt; {\nreq.logout((err) =&gt; {\nconsole.log(err);\n})\nres.redirect(\"/\");\n})\n</code></pre> <p>Here, we manage what happens when the user clicks the 'Logout' button. When req.logout(), a function that belongs to the passport library, is activated, the user session that a successful passport.authenticate() creates is destroyed. Because of this, the user will no longer have their username stored inside their browser's session. After this is performed successfully, res.redirect() will redirect the user to the \"/\" route.</p>"},{"location":"routes/#passportauthenticate","title":"Passport.authenticate","text":"<p>There is a lot that happens inside passport.authenticate().</p> Passport.authenticate <p></p> <p>When passport.authenticate() is run, it looks at the request that is sent to it from passport.js, more specifically the localStrategy() function.</p> Local Strategy Function <p></p> <p>Specifically, it looks for something that matches the username and password that it requires to run a function. In this case, this would be username and password that we have passed to it through the HTML form.</p> HTML Form <p></p> Accessing Username &amp; Password <p>We access the username and password, which are located inside the body of the html, by using getUserByUsernameAndPassword function that pulls the username and password from our fake-db.</p> <p>Once the function takes the username and password, these are placed into another function we made to check if there is a user. It checks that a user has both a username and password. That function will either return a user or 'false'.</p> <p>The returned value becomes a variable that we can pass into future functions. If 'true', or user, then the variable will run the function in the next step, if false you will be shown an error in the console.</p> Fake-DB Function <p></p> <p>The variable is used as a condition in an if statement.</p> <p>If the variable contains a user's information, we will run done(null, user), meaning that it will proceed to serializeUser().</p> <p>This function sends the variable into passport.serializeUser(), which runs another done function: done(null, user.username).</p> serializeUser Function <p></p> <p>This function first creates a session that contains the user's username. This session can be accessed in your routes as req.user. After being accessed, it activates the successRedirect of passport.authenticate(), leading the user to a new webpage.</p> Sessions Storing <p>If you are not comfortable with storing sessions read the documentation and return to this step.</p> <p>Sessions Storage</p> Route Redirects <p></p> Variable Equals False <p>If the variable contains false, the program will run the following code:</p> <pre><code>done(null, false, {message: \"Your login details are not valid. Please try again.\"})\n</code></pre> <p>This activates the failure redirect in passport.authenticate(), leading the user to a new webpage with an error. As well, if failure redirect is true, the message \"Your login details are not valid. Please try again.\" will be saved in req.session.messages.</p>"},{"location":"routes/#verify-successful-authentication","title":"Verify Successful Authentication","text":"<p>To see if your passport.authenticate was successful or not, you can inspect the webpage.</p> <p>\u00a0\u00a0\u00a0\u00a01.To complete this task go to the Storage tab at the top of the browser.</p> <p>\u00a0\u00a0\u00a0\u00a02.Click on Cookies.</p> <p>\u00a0\u00a0\u00a0\u00a03.If there is a session stored there, then that means your passport.authenticate() and passport.serializeUser() were successful.</p> <p>Sessions</p> <p></p>"},{"location":"routes/#conclusion","title":"Conclusion","text":"<p>Now that you have completed these instructions you have the ability to:</p> <p>\u2714 Create an express.js website that can authenticate users using your own modified version of the passport.js library.</p> <p>\u2714 Store the user's data in sessions using the express-sessions library.</p> <p>\u2714 Verify that your authentication was successful by inspecting the browser webpage.</p> <p>Congratulations</p> <p>You have created an Express web application that authenticates its users using your own modified version of the passport.js library and stored the user's data in as a session using the express-session library.</p> <p>Next Page: Troubleshooting</p>"},{"location":"strategies/","title":"Strategies","text":""},{"location":"strategies/#set-up-a-database","title":"Set Up A Database","text":"<p>For the purpose of this project we will be creating a fake db.</p> Advanced Users <p>You can read documentation on the implementation of a real database, such as MySQL or MongoDB. You can swap out the fake database for a real one by following the documentation for those languages and technologies.</p> <p>Database Implementation</p>"},{"location":"strategies/#1create-a-file","title":"1.Create A File","text":"<p>This file will be named fake-db.js.</p> <p>Inside this file we have created an array containing objects. Each object will contain a username and password.</p>"},{"location":"strategies/#2create-a-variable","title":"2.Create a Variable","text":"<p>Inside the fake-db.js you will create a variable.</p> <p>This will contain the fake database of users and passwords that you can use to access the program.</p> Fake Database <pre><code>  const users = [\n{\nusername: \"Gary\", password: \"gg\"\n},\n{\nusername: \"Brett\", password: \"bb\" }\n]\n</code></pre>"},{"location":"strategies/#3create-export-functions","title":"3.Create &amp; Export Functions","text":"<ul> <li> <p>For getting the user by the username or password.</p> </li> <li> <p>For finding the user by the username.</p> </li> </ul> <p>Both of these functions will return the entire object(username and password) associated with the requested user.</p> <p>Example: </p> <p>Add this block of code, containing the first function, below the users.</p> <pre><code>  const getUserByUsername = (username) =&gt; {\nlet user;\nusers.forEach(u =&gt; {\nif (u.username == username) {\nuser = u;\n}\n})\nreturn user;\n}\n</code></pre> <p>This function allows us to access the username for each user.</p> <p>Example: </p> <p>Paste this function below the first function.</p> <p><pre><code>  const getUserByUsernameAndPassword = (username, password) =&gt; {\nlet user = false;\nusers.forEach(u =&gt; {\nif (u.username == username) {\nif (u.password == password) {\nuser = u;\n}\n}\n})\nreturn user;\n}\n</code></pre> This function gives us access to both the username and user.</p> External Databases <p>If using another database you would code the functions differently but the logic would remain the same.</p>"},{"location":"strategies/#4export-functions","title":"4.Export Functions","text":"<p>This will allow you to access your database by importing the functions that query the database.</p> <p>Export The Functions</p> <p>Add this block to the bottom of your fake-db.js. </p> <pre><code>  module.exports = {\ngetUserByUsername,\ngetUserByUsernameAndPassword\n}\n</code></pre> <p>This is how we export the functions to be used in our other files. You will need to import these functions into the files where they are used.</p>"},{"location":"strategies/#setting-up-passportjs","title":"Setting Up Passport.js","text":"<p>In this section you will be setting up passport so that you can use it in your app to authenticate users.</p>"},{"location":"strategies/#1create-a-file-named-passportjs","title":"1.Create A File Named Passport.js","text":"<p>Create this file in the project folder. In this file you will be configuring passport for usage.</p>"},{"location":"strategies/#2import-libraries-files","title":"2.Import Libraries &amp; Files","text":"<p>The libraries you will bring in will be:</p> <ul> <li>Passport library</li> <li>Local passport strategy</li> <li>Functions you made for querying db in fake-db.js.</li> </ul> <p>In app.js, you need to import all the files and libraries that you will be using.</p> <p>Importing Files &amp; Libraries</p> <p>Paste these at the top of your app.js.</p> <pre><code>  const express = require(\"express\");\nconst bodyParser = require(\"body-parser\")\nconst session = require(\"express-session\")\nconst path = require(\"path\");\nconst passport = require(\"./passport\");\nconst app = express();\n</code></pre> Screenshot: App.js Imports <p>This is how the top of your app.js file should look.</p> <p></p>"},{"location":"strategies/#3create-a-local-strategy-variable","title":"3.Create A Local-Strategy Variable","text":"<p>To configure local strategy for authentication, you must specify the authentication criteria and define the authorization process.</p> <ul> <li>This involves passing the username and password through a function and using the result to query a mock database.</li> </ul> <p>Example: </p> <pre><code>code example\n</code></pre> <p>The function will return a value that is either the user or undefined. This is used as the condition inside an if-statement.</p> <p>If the value is a user, you run the function done(null, user). Null indicates that there are no errors, and user tells done to run passport's login function.</p> <p>If the value is false, you run the function done(null, false, {message: \"\"}). Null indicates that there are no errors, and false tells done 'NOT' to run passport's login function. Instead, it sends the error message to the console.</p> <p>If the passport's login function is run, passport will run the serializeUser function.</p>"},{"location":"strategies/#4create-serializeuser-function","title":"4.Create serializeUser Function","text":"<p>This function stores the identifying logged in user id which in this case we have used username. This information is stored inside the sessions.</p> <p>Function: serializeUser()</p> <p>Paste this into your passport.js below localStrategy().</p> <pre><code>  passport.serializeUser(function (user, done) {\ndone(null, user.username);\n});\n</code></pre>"},{"location":"strategies/#5create-deserializeuser-function","title":"5.Create deserializeUser Function","text":"<p>In this function the information that the done function inside the serialize function takes, which is the user's username, is used in deserializeUser. We use a function(name of function) from our fake-db.js to query for the user based off of their username. The returned value from that function is stored inside a variable.</p> <p>Function: deserializeUser()</p> <p>Paste this code below your serializeUser() function.</p> <pre><code>  passport.deserializeUser(function (username, done) {\nlet user = getUserByUsername(username);\nif (user) {\ndone(null, user);\n} else {\ndone({ message: \"User not found\" }, null);\n}\n});\n</code></pre> <p>If the variable contains an object(username, password), we run done(null, user). This done function puts the user object inside req.user, which can be accessed for a future usage.</p> <p>If the variable contains undefined, we run done({message: \"\"}, null), where the message is sent to the servers console(VSCode console) to tell the user that the function failed to retrieve a matching user with the requested username.</p>"},{"location":"strategies/#export-local-login","title":"Export Local Login","text":"<p>You need to tell passport that you want to use the local strategy and that you want to export passport so that it can be used in app.js.</p>"},{"location":"strategies/#1add-code-to-export-module","title":"1.Add Code To Export Module","text":"<p>Add a line of code to the bottom of passport.js.</p> <p>Export Local Strategy</p> <pre><code>  module.exports = passport.use(localStrategy);\n</code></pre> Export Local Strategy <p>This is what the bottom of your passport.js should look like.</p> <p></p> <p>By running this you modify passport to use your local login strategy. As well you can now export your modified passport to app.js.</p>"},{"location":"strategies/#conclusion","title":"Conclusion","text":"<p>On this page we learned about setting up the local strategy for passport.js. Move on to the next page to learn about implementing passport.js.</p> <p>Congratulations</p> <p>You have successfully set up the local strategy, database, and functions to authenticate users.</p> <p>Next Page: Routes</p>"},{"location":"trouble/","title":"Troubleshooting","text":"Authentication Not Working <p>Check to see if you have initialized your passport with your strategy before implementing it into your routes. There are two versions of passport inside your project but only one will work. Make sure that you have imported the correct library.  </p> Browser Not Loading On Localhost <p>Check to see that you are using the correct port consistently throughout your application.</p> <p>Make sure you have run your script command.</p> Local Strategy Not Getting Called <p>If you are using the latest version, bodyParser() is deprecated. Try using bodyParser.urlencoded({extended:true}).</p> <p>If this solution does not work for you review this thread from stack overflow with some other options: </p> <p>Stack Overflow</p> Login Button Does Not Redirect <p>Double check that your route path match the path in the functions.</p> <p>For more information you may also like to refer to the following documentation:</p> <p>Auth0</p> Session Is Not Showing In Browser <p>For this issue check your app.js. Look for the code:</p> <p><code>// cookie: { secure: true }</code></p> <p>This is commented out so that you can run this application on localhost. However, if you are running your app on https you will want to uncomment this line of code.</p> <p>Setting secure: true on the cookie in an Express application ensures that the cookie is only transmitted over a secure HTTPS connection. This prevents the cookie from being intercepted and stolen by attackers. It's necessary to ensure all cookies are transmitted over HTTPS when running an Express app on HTTPS.</p> <p>Next Page: Glossary</p>"}]}